name: deploy
on:
  repository_dispatch:
    types: [deploy]

jobs:
  build-and-push-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer vendor
        uses: actions/cache@v1
        env:
          cache-name: cache-composer-vendor-for-deploy
        with:
          path: vendor
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/composer.lock') }}

      - run: composer install --no-progress

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules-for-deploy
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/yarn.lock') }}

      - name: yarn install
        uses: borales/actions-yarn@v2.0.0
        with:
          cmd: install

      - name: Build minified js/css files
        uses: borales/actions-yarn@v2.0.0
        with:
          cmd: prod

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build app image and push it to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: laravel-tweet-ddd-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  build-and-push-nginx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer vendor
        uses: actions/cache@v1
        env:
          cache-name: cache-composer-vendor-for-deploy
        with:
          path: vendor
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/composer.lock') }}

      - run: composer install --no-progress

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules-for-deploy
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/yarn.lock') }}

      - name: yarn install
        uses: borales/actions-yarn@v2.0.0
        with:
          cmd: install

      - name: Build minified js/css files
        uses: borales/actions-yarn@v2.0.0
        with:
          cmd: prod

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build nginx image and push it to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: laravel-tweet-ddd-nginx
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./Dockerfile.nginx -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
