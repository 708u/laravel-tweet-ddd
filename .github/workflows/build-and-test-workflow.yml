name: build-and-test
on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: 708u/laravel-alpine:7.4.3-node-browsers
      env:
        APP_ENV: testing
        APP_URL: http://localhost
        DB_CONNECTION: mysql
        DB_HOST: mysql
        DB_DATABASE: laravel_tweet_ddd_testing
        CACHE_DRIVER: redis
        QUEUE_CONNECTION: redis
        SESSION_DRIVER: redis
        MAIL_DRIVER: log
        MAIL_HOST: smtp.mailtrap.io
        MAIL_PORT: 2525
        MAIL_FROM_ADDRESS: from@example.com
        MAIL_FROM_NAME: Laravel-tweet
        AWS_ACCESS_KEY_ID: root
        AWS_SECRET_ACCESS_KEY: password
        AWS_DEFAULT_REGION: us-east-1
        AWS_BUCKET: test
        AWS_URL: http://minio:9000
        AWS_PATH_STYLE_ENDPOINT: true
        MINIO_PORT: 9000
        REDIS_HOST: redis
        DUSK_BASE_URL: http://localhost:8000
        CHROME_DRIVER_HOST: http://localhost:9515
        TELESCOPE_ENABLED: false
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: laravel_tweet_ddd_testing
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ROOT_HOST: "%"
      redis:
        image: redis:5.0.7-alpine
      minio:
        image: bitnami/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: root
          MINIO_SECRET_KEY: password
          MINIO_DEFAULT_BUCKETS: test
    steps:
      - uses: actions/checkout@v2
      - run: cp .env.example .env

      # Install dependencies
      - name: Cache composer vendor
        uses: actions/cache@v1
        env:
          cache-name: cache-composer-vendor
        with:
          path: vendor
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/composer.lock') }}
      - run: composer install
      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/yarn.lock') }}

      # Format Check
      - run: ./vendor/bin/php-cs-fixer fix --config=./.php_cs.dist --dry-run -v

      - run: yarn
      - run: yarn prod
      - run: php artisan key:generate

      # cache config
      - run: php artisan config:cache

      # Determine if laravel application successfully loaded
      - run: php artisan
      - run: php artisan route:list

      # Unit test
      - run: php artisan migrate
      - run: vendor/bin/phpunit

      # E2E test with dusk.
      - run: chromedriver --whitelisted-ips > /dev/null 2>&1 &
      - run: php artisan serve > /dev/null 2>&1 &
      - run: php artisan dusk

      # Archive Artifacts
      - name: Archive screenshots
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: e2e-screenshots
          path: tests/Browser/screenshots
      - name: Archive laravel log
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: laravel-log
          path: storage/logs

      - uses: 8398a7/action-slack@v2.7.0
        if: always()
        with:
          status: ${{ job.status }}
          author_name: Integration Test
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  prepare-assets-for-deployment:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules-for-deploy
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/yarn.lock') }}

      - name: yarn install
        uses: borales/actions-yarn@v2.0.0
        with:
          cmd: install

      - name: Compile js/css files
        uses: borales/actions-yarn@v2.0.0
        with:
          cmd: prod

      - name: Upload assets as github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: public
          path: public

  upload-assets-to-S3:
    needs: [build-and-test, prepare-assets-for-deployment]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Download compiled assets
        uses: actions/download-artifact@v2

      - name: Upload assets to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_ASSETS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: 'public/'

  build-push-app-image:
    needs: [build-and-test, prepare-assets-for-deployment]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer vendor
        uses: actions/cache@v1
        env:
          cache-name: cache-composer-vendor-for-deploy
        with:
          path: vendor
          key: ${{ runner.os }}-${{ env.cache-name }}-v1-${{ hashFiles('**/composer.lock') }}

      - run: composer install --no-progress --no-dev

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build app image and push it to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: laravel-tweet-ddd-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  build-push-nginx-image-if-some-change-detected:
    needs: [build-and-test, prepare-assets-for-deployment]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Detect git diff for nginx image build
        uses: technote-space/get-diff-action@v1.2.8
        id: git_diff
        with:
          PREFIX_FILTER: docker/nginx

      - name: Build nginx image and push it to ECR If some changes detected
        if: ${{ steps.git_diff.outputs.count > 0}}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: laravel-tweet-ddd-nginx
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./docker/nginx
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  update-ecs-service:
    needs: [upload-assets-to-S3, build-push-app-image, build-push-nginx-image-if-some-change-detected]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service --service ${{ secrets.ECR_SERVICE }} --cluster ${{ secrets.ECR_CLUSTER }} --force-new-deployment

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
